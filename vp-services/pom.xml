<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- DON'T CHANGE THE CONTENT OF THIS COMMENT UNLESS YOU REALLY KNOW WHAT
	YOU ARE DOING! [soi-toolkit.gen.version=0.3.1] [soi-toolkit.gen.type=services]
	[soi-toolkit.gen.createDate=2011-06-30T14:55:14.318+02:00] [soi-toolkit.gen.artifactId=vp] -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>se.skltp.vp</groupId>
		<artifactId>vp-parent</artifactId>
		<version>3.2.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>vp-services</artifactId>
    <packaging>mule</packaging>
	<name>vp-services</name>

	<dependencies>
		<dependency>
		  <groupId>org.soitoolkit.commons.components</groupId>
			<artifactId>soitoolkit-commons-mule</artifactId>
			<version>${soitoolkit.version}</version>
		</dependency>
		<dependency>
			<groupId>org.soitoolkit.commons.poms</groupId>
			<artifactId>soitoolkit-test-dependencies</artifactId>
			<version>${soitoolkit.version}</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.soitoolkit.commons.poms.mule-dependencies</groupId>
			<artifactId>soitoolkit-mule-${vp.mule.version}-dependencies</artifactId>
			<version>${soitoolkit.version}</version>
			<type>pom</type>
		</dependency>

		<!-- TAK vagval schemas -->
		<dependency>
			<groupId>se.skltp.tak</groupId>
			<artifactId>tak-schemas</artifactId>
			<version>${tak.version}</version>
        </dependency>


		<!-- itintegration monitoring schemas fÃ¶r PingForConfiguration -->
		<dependency>
		  	<groupId>se.skltp.itintegration.monitoring</groupId>
  			<artifactId>ServiceContracts_itintegration_monitoring</artifactId>
			<version>1.0</version>
		</dependency>

        <!--
        	Until rivta itintegration infrastructure schemas 2.0 is published in central maven a
        	local se.skltp release of schemas us used.
        -->
        <dependency>
			<groupId>se.skltp.infrastructure.itintegration</groupId>
  			<artifactId>ServiceContracts_infrastructure_itintegration_registry</artifactId>
			<version>2.0-RC1</version>
        </dependency>

		<!-- Ping -->
		<dependency>
			<groupId>se.skltp.vp</groupId>
			<artifactId>itinfra-tp-schemas</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>se.skltp.vp</groupId>
			<artifactId>itinfra-tp-ping-virtualisering</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>se.skltp.vp</groupId>
			<artifactId>itinfra-tp-ping-test-producer</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
			<version>1.10.19</version>
		</dependency>

		<dependency>
		  <groupId>se.skltp.vp</groupId>
		  <artifactId>vp-hsa-cache</artifactId>
		  <version>${project.version}</version>
		</dependency>

        <dependency>
          <groupId>xmlunit</groupId>
          <artifactId>xmlunit</artifactId>
          <version>1.5</version>
        </dependency>

	</dependencies>

	<build>
        <resources>
        	<!-- filter property file to get VP version in property file consistent from the build -->
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                	<include>vp-build.properties</include>
                </includes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                	<exclude>vp-build.properties</exclude>
                </excludes>
            </resource>
            <resource>
                <!-- To get mule-config files from the Mule Studio defined resource-folder in the classpath... -->
                <directory>${basedir}/src/main/app</directory>
            </resource>
        </resources>
		<testResources>
			<testResource>
				<directory>${basedir}/src/test/resources</directory>
			</testResource>
		</testResources>

		<plugins>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
			</plugin>

			<!-- setup/debug of dependencies: dump all dependencies for inspection into dir target/dependency -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

            <plugin>
                <groupId>org.mule.tools</groupId>
                <artifactId>maven-mule-plugin</artifactId>
                <extensions>true</extensions>
                <!-- Include mule-dependencies that doesn't come with Mule 3.x otherwise we can't install to a vanilla Mule 3.x installation -->
                <configuration>
                    <inclusions>
                        <inclusion>
                            <groupId>org.mule.modules</groupId>
                            <artifactId>commonretrypolicies</artifactId>
                        </inclusion>
                        <inclusion>
                            <groupId>org.mule.transports</groupId>
                            <artifactId>mule-transport-restlet</artifactId>
                        </inclusion>
                        <inclusion>
                            <groupId>org.mule.modules</groupId>
                            <artifactId>mule-module-rest</artifactId>
                        </inclusion>
                        <inclusion>
                            <groupId>org.mule.modules</groupId>
                            <artifactId>devkit</artifactId>
                        </inclusion>
                    </inclusions>
                </configuration>
            </plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>assemblies/vp-virtuell-tjanst-teststub-assembly-descriptor.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
            <plugin>
              <artifactId>maven-jar-plugin</artifactId>
              <configuration>
                <!--
                 if no classifier is declared, then a mvn install results in a file in
                 the local repo: ic2-1.0.0-SNAPSHOT.mule
                 which is a jar-file - only strangely named and with a bad extension
                -->
                <classifier>core</classifier>
                <excludes>
                  <exclude>log4j2.xml</exclude>
                </excludes>
              </configuration>
              <executions>
                <execution>
                  <goals>
                    <goal>jar</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>

			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>${vp.cxf.version}</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<sourceRoot>${basedir}/target/generated/src/test/java</sourceRoot>
							<wsdlOptions>

								<wsdlOption>
									<extraargs>
										<extraarg>-p</extraarg>
										<extraarg>
											urn:riv:domain:subdomain:GetProductDetail:1:rivtabp20=se.skltp.domain.subdomain.getproducdetail.v1.rivtabp20
										</extraarg>
										<extraarg>-p</extraarg>
										<extraarg>
											urn:riv:domain:subdomain:GetProductDetailResponder:1=se.skltp.domain.subdomain.getproducdetail.v1
										</extraarg>
										<extraarg>-p</extraarg>
										<extraarg>
											http://www.w3.org/2005/08/addressing=org.w3.wsaddressing10
										</extraarg>
									</extraargs>
									<wsdl>src/test/resources/schemas/interactions/GetProductDetailInteraction/GetProductDetailInteraction_1.0_RIVTABP20.wsdl</wsdl>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
			    <artifactId>maven-resources-plugin</artifactId>
			    <executions>
			        <execution>
			            <id>copy-log4j-resource</id>
			            <phase>prepare-package</phase>
			            <goals>
			                <goal>copy-resources</goal>
			            </goals>
			            <configuration>
			            	<overwrite>true</overwrite>
			                <outputDirectory>${project.build.outputDirectory}</outputDirectory>
			                <resources>
			                    <resource>
			                        <directory>src/environment</directory>
			                        <includes>
			                            <include>log4j2.xml</include>
			                        </includes>
			                    </resource>
			                </resources>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											properties-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-2,)
										</versionRange>
										<goals>
											<goal>
												write-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.cxf
										</groupId>
										<artifactId>
											cxf-codegen-plugin
										</artifactId>
										<versionRange>
											[2.1.9,)
										</versionRange>
										<goals>
											<goal>wsdl2java</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.mule.tools
										</groupId>
										<artifactId>
											maven-mule-plugin
										</artifactId>
										<versionRange>
											[1.7,)
										</versionRange>
										<goals>
											<goal>
												filter-resources
											</goal>
											<goal>
												attach-test-resources
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	 <profiles>
        <profile>
            <id>muleServer</id>
            <!-- Start mule server with the command "mvn -PmuleServer" or "mvn -PmuleServer -Dexec.args="${artifaceId}-config.xml"" if you want to override the default config-file -->
            <build>
                <defaultGoal>test</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <mainClass>se.skl.tp.vp.VpMuleServer</mainClass>
                                    <classpathScope>test</classpathScope>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
